# import Link, LinkSubscriptionPayload, LinkOrderByInput, Vote, VoteSubscriptionPayload from "./generated/prisma.graphql"

# Autherntication types are used to hide the password from external queries.
type AuthPayload {
  token: String
  user: User
}

type SocialIDProviderInfo {
  socialID: String!
  imageURL: String
}

enum Provider {
  facebook
  twitter
  linkedin
  github
  instagram
}

type User {
  id: ID!
  name: String
  email: String!
  links: [Link!]!
  votes: [Vote!]!
  facebook: SocialIDProviderInfo
  twitter: SocialIDProviderInfo
  linkedin: SocialIDProviderInfo
  github: SocialIDProviderInfo
  instagram: SocialIDProviderInfo
}

fragment socialIDs on User {
  facebook
  twitter
  linkedin
  github
  instagram
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  # Fetch a single link by its `id`
  # link(id: ID!): Link
}

type Mutation {
  post(url: String!, description: String!): Link!

  # Update a link
  # updateLink(id: ID!, url: String, description: String): Link

  # Delete a link
  # deleteLink(id: ID!): Link

  # User mutations
  signupPassword(email: String!, password: String!, name: String!): AuthPayload
  signupSocialProvider(provider: Provider!, providerToken: String!): AuthPayload
  loginPassword(email: String!, password: String!): AuthPayload
  loginSocialProvider(provider: Provider!, providerToken: String!): AuthPayload
  vote(linkId: ID!): Vote
}


type Subscription {
  newLink: LinkSubscriptionPayload
  newVote: VoteSubscriptionPayload
}
